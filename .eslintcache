[{"/Users/christianpickett/Documents/atlis-stockholm/src/reportWebVitals.js":"1","/Users/christianpickett/Documents/atlis-stockholm/src/App.js":"2","/Users/christianpickett/Documents/atlis-stockholm/src/components/Home.js":"3","/Users/christianpickett/Documents/atlis-stockholm/src/index.js":"4","/Users/christianpickett/Documents/atlis-stockholm/src/components/HomeTab.js":"5","/Users/christianpickett/Documents/atlis-stockholm/src/components/WelcomeModal.js":"6","/Users/christianpickett/Documents/atlis-stockholm/src/components/WelcomeConfirmModal.js":"7","/Users/christianpickett/Documents/atlis-stockholm/src/components/Welcome.js":"8","/Users/christianpickett/Documents/atlis-stockholm/src/aws-exports.js":"9","/Users/christianpickett/Documents/atlis-stockholm/src/components/Register.js":"10","/Users/christianpickett/Documents/atlis-stockholm/src/components/AccountTab.js":"11","/Users/christianpickett/Documents/atlis-stockholm/src/components/SignIn.js":"12","/Users/christianpickett/Documents/atlis-stockholm/src/graphql/mutations.js":"13","/Users/christianpickett/Documents/atlis-stockholm/src/components/ScanTab.js":"14","/Users/christianpickett/Documents/atlis-stockholm/src/context/UserContext.js":"15","/Users/christianpickett/Documents/atlis-stockholm/src/graphql/queries.js":"16","/Users/christianpickett/Documents/atlis-stockholm/src/context/KContext.js":"17"},{"size":362,"mtime":1609365763170,"results":"18","hashOfConfig":"19"},{"size":3527,"mtime":1609702308945,"results":"20","hashOfConfig":"19"},{"size":3226,"mtime":1609698882746,"results":"21","hashOfConfig":"19"},{"size":648,"mtime":1609628305153,"results":"22","hashOfConfig":"19"},{"size":1209,"mtime":1609692328926,"results":"23","hashOfConfig":"19"},{"size":2466,"mtime":1609726592383,"results":"24","hashOfConfig":"19"},{"size":1762,"mtime":1609726607118,"results":"25","hashOfConfig":"19"},{"size":6842,"mtime":1609735592873,"results":"26","hashOfConfig":"19"},{"size":692,"mtime":1609656063802,"results":"27","hashOfConfig":"19"},{"size":2205,"mtime":1609737208900,"results":"28","hashOfConfig":"19"},{"size":4140,"mtime":1609700269196,"results":"29","hashOfConfig":"19"},{"size":6203,"mtime":1609737608623,"results":"30","hashOfConfig":"19"},{"size":1765,"mtime":1609656061656,"results":"31","hashOfConfig":"19"},{"size":1276,"mtime":1609693940686,"results":"32","hashOfConfig":"19"},{"size":78,"mtime":1609649983853,"results":"33","hashOfConfig":"19"},{"size":1111,"mtime":1609656061578,"results":"34","hashOfConfig":"19"},{"size":75,"mtime":1609656771119,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1swhmsm",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/christianpickett/Documents/atlis-stockholm/src/reportWebVitals.js",[],["80","81"],"/Users/christianpickett/Documents/atlis-stockholm/src/App.js",["82"],"/Users/christianpickett/Documents/atlis-stockholm/src/components/Home.js",[],["83","84"],"/Users/christianpickett/Documents/atlis-stockholm/src/index.js",[],["85","86"],"/Users/christianpickett/Documents/atlis-stockholm/src/components/HomeTab.js",[],["87","88"],"/Users/christianpickett/Documents/atlis-stockholm/src/components/WelcomeModal.js",["89"],"import React, { useContext } from 'react';\nimport { Modal, List, Button, InputItem , Picker, Flex} from 'antd-mobile';\nimport { UserContext } from '../context/UserContext';\nimport { Link } from 'react-router-dom';\n\nconst WelcomeModal = ({ modalVisible, setModalVisible, fullSend, welcomeRequest, setWelcomeResponse  }) => {\n\n    const user = useContext(UserContext);\n    // console.log(user);\n    return (\n        user &&\n        <Modal\n            popup\n            visible={modalVisible}\n            onClose={() => setModalVisible(false)}\n            animationType=\"slide-up\"\n            >\n                {welcomeRequest && \n                    <List renderHeader={() => <div>Atlis Connect - {welcomeRequest.appName}</div>} className=\"popup-list\">\n                        {welcomeRequest.request.map((i, index) => (\n                            <InputItem\n                                key={index}\n                                clear\n                                placeholder={`Click to enter ${i}`}\n                                onChange={el => setWelcomeResponse(prev => ({...prev, [i]: el}))}\n                            >\n                                {i.charAt(0).toUpperCase() + i.slice(1)}\n                            </InputItem>\n                            // <Picker \n                            //     cols={1} title={i.charAt(0).toUpperCase() + i.slice(1)} \n                            //     extra=\"extra\" okText=\"ok\" dismissText=\"dismiss\"\n                            //     // data={user.apps}\n                            //     >\n                            //     <List.Item arrow=\"horizontal\">{i.charAt(0).toUpperCase() + i.slice(1)}</List.Item>\n                            // </Picker>\n                        ))}\n                        <List.Item>\n                            <Flex>\n                                <Flex.Item>\n                                    <Button type=\"primary\" onClick={() => { setModalVisible(false); fullSend(); }}>Yes</Button>\n                                </Flex.Item>\n                                <Flex.Item>\n                                    <Button type=\"warning\" onClick={() => { setModalVisible(false);}}> <Link style={{color:\"white\"}} to=\"/\">No</Link></Button>\n                                </Flex.Item>\n                            </Flex>\n                        </List.Item>\n                    </List>\n                }\n            \n        </Modal>\n    )\n}\n\nexport default WelcomeModal\n","/Users/christianpickett/Documents/atlis-stockholm/src/components/WelcomeConfirmModal.js",[],"/Users/christianpickett/Documents/atlis-stockholm/src/components/Welcome.js",["90"],"import React, { useEffect, useState, useContext } from 'react';\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\nimport { useHistory } from \"react-router-dom\";\n\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport crypto from \"crypto-js\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport WelcomeModal from './WelcomeModal';\nimport WelcomeConfirmModal from './WelcomeConfirmModal';\n\nimport { UserContext } from '../context/UserContext';\nimport { KContext } from '../context/KContext';\n\nimport { createUserKey, createUser, deleteUser, deleteUserKey } from '../graphql/mutations';\nimport jwt from \"jsonwebtoken\";\nimport { Toast } from 'antd-mobile';\n\nconst Welcome = () => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const [confirmModalVisible, setConfirmModalVisible] = useState(false);\n\n    const [welcomeRequest, setWelcomeRequest] = useState();\n    const [welcomeResponse, setWelcomeResponse] = useState();\n\n    const [ws, setWs] = useState();\n    const [app, setApp] = useState({});\n    const [saved, setSaved] = useState(false);\n\n    const user = useContext(UserContext);\n    const k = useContext(KContext);\n    const history = useHistory();\n\n    const fullSend = () => {\n        if (!saved) {\n            if(welcomeResponse) {\n                const userAppID = uuidv4();\n                editData(userAppID)\n                    .then(res => {\n                        ws.send(JSON.stringify({\n                            message: \"send\",\n                            to: welcomeRequest.requestID,\n                            appID: app.appID,\n                            data: crypto.AES.encrypt(JSON.stringify({ ...welcomeResponse, userAppID }), welcomeRequest.requestID).toString(),\n                            action: \"message\"\n                        }));\n                        // history.push(\"/\")\n                        window.location = \"/\";\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    })\n            }\n        } else {\n            let responseData = {};\n            welcomeRequest.request.forEach((i) => { \n                responseData[i] = user.apps[app.appID][i]  \n            });\n            responseData[\"userAppID\"] = user.apps[app.appID].userAppID;\n\n            ws.send(JSON.stringify({\n                message: \"send\",\n                to: welcomeRequest.requestID,\n                appID: app.appID,\n                data: crypto.AES.encrypt(JSON.stringify(responseData), welcomeRequest.requestID).toString(),\n                action: \"message\"\n            }));\n            history.push(\"/\")\n        }\n        \n        \n    }  \n    const editData = async (userAppID) => {\n        if (user) {\n            Toast.loading(\"Saving.....\", 2);\n            await API\n                .graphql(graphqlOperation(createUserKey, { input : { userID: user.id }}))\n                .then(async (res) => {\n                    const d = jwt.sign({ ...user, apps: { ...user.apps, [app.appID]: {...welcomeResponse, userAppID, appName: app.appName } } }, res.data.createUserKey.id);\n                    await API\n                        .graphql(graphqlOperation(createUser, { input : { data: d } }))\n                        .then( async(res) => {\n                            await API\n                                .graphql(graphqlOperation(deleteUser, {input : { id : k.uID} }))\n                                .then(async(res) => {\n                                    await API\n                                        .graphql(graphqlOperation(deleteUserKey, {input: {id: k.ukID}} ))\n                                        .then(res => {\n                                            Toast.success(\"Saved App Data.\")\n                                            //window.location = \"/\";\n                                        })\n                                        .catch(err => {\n                                            console.log(err);\n                                        })\n                                })\n                                .catch(err => {\n                                    console.log(err);\n                                })\n                        })\n                        .catch(err => {\n                            console.log(err);\n                            Toast.fail(\"Error editing user account\", 3);\n                        })\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n\n        }\n        \n    } \n\n    const getAppData = (appID) => {\n        if (user.apps[appID]) {\n            setSaved(true);\n            setConfirmModalVisible(true);\n        } else {\n            setModalVisible(true);\n        }\n    }\n\n    useEffect(() => {\n        if (user) {\n            let request = {};\n            window.location.search.replace(\"?\", \"\").split(\"&\").forEach(i => {\n                const r = i.split(/=(.+)/);\n                request[r[0]] = r[1];\n            });\n\n            let d = jwt.verify(request.data, request.requestID);\n            request = { ...request, ...d };\n\n            setWelcomeRequest(request);\n\n            const appName = request.appName;\n            const appID = request.appID;\n\n            setApp({ appName, appID });\n\n            getAppData(appID);\n\n            const ws = new W3CWebSocket(`wss://u9j9kermu5.execute-api.us-east-1.amazonaws.com/dev`);\n            setWs(ws);\n            ws.onopen = () =>  {\n                console.log(\"connected.\");\n                ws.send(JSON.stringify({\n                    message: \"connect\",\n                    action: \"message\"\n                }));\n            };\n\n            ws.onclose = () => {\n                console.log(\"disconnected.\");\n            };\n\n            ws.onmessage = (msg) =>  {\n                if (msg.type === \"message\") {\n                    const data = JSON.parse(msg.data);\n                    if (data.status === \"connect\") {\n                        console.log(data.id);\n                    }\n                    if (data.status === \"send\") {\n                        console.log(\"SEND: \", data);\n                    }\n                }\n            };\n\n        } else {\n            Auth.signOut();\n            window.location = \"/\"\n        }\n        \n    }, []);\n    return (\n        <div>\n            <WelcomeModal \n                modalVisible={modalVisible} \n                setModalVisible={setModalVisible} \n                fullSend={fullSend} \n                welcomeRequest={welcomeRequest} \n                setWelcomeResponse={setWelcomeResponse} />\n            <WelcomeConfirmModal \n                confirmModalVisible={confirmModalVisible} \n                fullSend={fullSend} \n                app={app}\n                setConfirmModalVisible={setConfirmModalVisible} />\n        </div>\n    )\n}\n\nexport default Welcome\n",["91","92"],"/Users/christianpickett/Documents/atlis-stockholm/src/aws-exports.js",[],"/Users/christianpickett/Documents/atlis-stockholm/src/components/Register.js",[],"/Users/christianpickett/Documents/atlis-stockholm/src/components/AccountTab.js",[],["93","94"],"/Users/christianpickett/Documents/atlis-stockholm/src/components/SignIn.js",[],"/Users/christianpickett/Documents/atlis-stockholm/src/graphql/mutations.js",[],"/Users/christianpickett/Documents/atlis-stockholm/src/components/ScanTab.js",["95"],"import { Button, Toast, WhiteSpace, WingBlank } from 'antd-mobile';\nimport React, {useState} from 'react';\nimport QrReader from 'react-qr-reader'\n\nconst ScanTab = () => {\n    const [result, setResult] = useState(\"\");\n    const [scanning, setScanning] = useState(false);\n    const handleScan = (e) => {\n        if (e) {\n            // Toast.success(e);\n            setResult(e)\n            setScanning(false);\n            Toast.loading(\"redirecting...\", 1, () => {\n                window.location = e;\n            })\n        }\n        \n    }\n\n    return (\n        <div style={{ backgroundColor: 'white', height: '100%', textAlign: 'center' }}>\n            <WingBlank>\n                <div style={{ paddingTop: 60 }}>\n                    <h3>Scan Code</h3>\n                    <WhiteSpace />\n                    { scanning ? \n                        <QrReader\n                            delay={300}\n                            onError={(e) => Toast.fail(e)}\n                            onScan={handleScan}\n                            style={{ width: '100%' }}\n                        />\n                    : <Button type=\"primary\" onClick={() => setScanning(true)}>Scan</Button> }\n                </div>\n            </WingBlank>\n        </div>\n    )\n}\n\nexport default ScanTab\n","/Users/christianpickett/Documents/atlis-stockholm/src/context/UserContext.js",[],"/Users/christianpickett/Documents/atlis-stockholm/src/graphql/queries.js",[],["96","97"],"/Users/christianpickett/Documents/atlis-stockholm/src/context/KContext.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":6,"column":24,"nodeType":"104","messageId":"105","endLine":6,"endColumn":31},{"ruleId":"98","replacedBy":"106"},{"ruleId":"100","replacedBy":"107"},{"ruleId":"98","replacedBy":"108"},{"ruleId":"100","replacedBy":"109"},{"ruleId":"98","replacedBy":"110"},{"ruleId":"100","replacedBy":"111"},{"ruleId":"102","severity":1,"message":"112","line":2,"column":43,"nodeType":"104","messageId":"105","endLine":2,"endColumn":49},{"ruleId":"113","severity":1,"message":"114","line":173,"column":8,"nodeType":"115","endLine":173,"endColumn":10,"suggestions":"116"},{"ruleId":"98","replacedBy":"117"},{"ruleId":"100","replacedBy":"118"},{"ruleId":"98","replacedBy":"119"},{"ruleId":"100","replacedBy":"120"},{"ruleId":"102","severity":1,"message":"121","line":6,"column":12,"nodeType":"104","messageId":"105","endLine":6,"endColumn":18},{"ruleId":"98","replacedBy":"122"},{"ruleId":"100","replacedBy":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'getUser' is defined but never used.","Identifier","unusedVar",["124"],["125"],["124"],["125"],["124"],["125"],"'Picker' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAppData' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["126"],["124"],["125"],["124"],["125"],"'result' is assigned a value but never used.",["124"],["125"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [getAppData, user]",{"range":"129","text":"130"},[6272,6274],"[getAppData, user]"]